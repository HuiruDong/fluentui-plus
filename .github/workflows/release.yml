name: Release

on:
  push:
    branches:
      - master
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  packages: write

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [20]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Type check
        run: yarn type-check

      - name: Lint check
        run: yarn lint:check

      - name: Format check
        run: yarn format:check

      - name: Run tests
        run: yarn test:coverage

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build package
        run: yarn build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-dist
          path: dist/
          retention-days: 1

  release:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'
          cache: 'yarn'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: dist/

      - name: Check if release is needed
        id: check_release
        run: |
          # 检查是否有新的提交需要发布
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          COMMITS_SINCE_TAG=$(git rev-list ${LAST_TAG}..HEAD --count)

          echo "last_tag=${LAST_TAG}" >> $GITHUB_OUTPUT
          echo "commits_since_tag=${COMMITS_SINCE_TAG}" >> $GITHUB_OUTPUT

          if [ "$COMMITS_SINCE_TAG" -gt 0 ] || [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
          fi

      - name: Determine release type
        id: release_type
        if: steps.check_release.outputs.should_release == 'true'
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          else
            # 基于 commit 消息自动确定发布类型
            COMMITS=$(git log ${{ steps.check_release.outputs.last_tag }}..HEAD --oneline)
            
            if echo "$COMMITS" | grep -q "BREAKING CHANGE\|^feat!"; then
              echo "type=major" >> $GITHUB_OUTPUT
            elif echo "$COMMITS" | grep -q "^feat"; then
              echo "type=minor" >> $GITHUB_OUTPUT
            else
              echo "type=patch" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Create release
        if: steps.check_release.outputs.should_release == 'true'
        run: |
          yarn release:${{ steps.release_type.outputs.type }}

      - name: Get new version
        if: steps.check_release.outputs.should_release == 'true'
        id: version
        run: |
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "new_version=${NEW_VERSION}" >> $GITHUB_OUTPUT

      - name: Publish to npm
        if: steps.check_release.outputs.should_release == 'true'
        run: |
          # 检查版本是否已存在于 npm
          if npm view fluentui-plus@${{ steps.version.outputs.new_version }} version 2>/dev/null; then
            echo "Version ${{ steps.version.outputs.new_version }} already exists on npm, skipping publish"
          else
            echo "Publishing version ${{ steps.version.outputs.new_version }} to npm"
            npm publish --access public
          fi
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Create GitHub Release
        if: steps.check_release.outputs.should_release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.new_version }}
          release_name: Release v${{ steps.version.outputs.new_version }}
          body: |
            ## Changes

            Check the [CHANGELOG.md](https://github.com/${{ github.repository }}/blob/v${{ steps.version.outputs.new_version }}/CHANGELOG.md) for detailed changes.

            ## Installation

            ```bash
            npm install fluentui-plus@${{ steps.version.outputs.new_version }}
            # or
            yarn add fluentui-plus@${{ steps.version.outputs.new_version }}
            ```
          draft: false
          prerelease: false

      - name: Update package-lock.json (if exists)
        if: steps.check_release.outputs.should_release == 'true'
        run: |
          if [ -f package-lock.json ]; then
            npm install --package-lock-only
            git add package-lock.json
            git commit -m "chore: update package-lock.json [skip ci]" || true
            git push origin ${{ github.ref_name }} || true
          fi

  # 可选：发布到 GitHub Packages
  publish-gpr:
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://npm.pkg.github.com'
          cache: 'yarn'

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-dist
          path: dist/

      - name: Configure package for GitHub Packages
        run: |
          cp package.json package.json.bak
          # 更新包名以符合 GitHub Packages 规范
          node -e "
            const pkg = require('./package.json');
            pkg.name = '@${{ github.repository_owner }}/' + pkg.name;
            pkg.publishConfig = { registry: 'https://npm.pkg.github.com' };
            require('fs').writeFileSync('package.json', JSON.stringify(pkg, null, 2));
          "

      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Restore original package.json
        run: mv package.json.bak package.json
